#Conitec App - script

library(shiny) 
library(rvest) 
library(dplyr) 
library(readr)

#Definindo a primeira tabela - que deve rodar uma vez só, quando eu lançar o app:

outputDir <- "tabela"

#Função que salva a nova tabela, a partir do arquivo html do site, gerando um arquivo csv:

saveData <- function(tabela) {
  url_base <- "http://conitec.gov.br/tecnologias-em-avaliacao"
  pagina_html <- read_html(url_base)
  lista_tabelas <- html_table(pagina_html, header = TRUE)
  tabela <- (lista_tabelas[[1]])
  write_csv(tabela,
            file.path("tabela"),
            append = FALSE,
            na=""
  )
}
#Salvar a tabela original (chamei apenas de "tabela") num arquivo local ("tabela"):
saveData()

#Função para abrir a tabela salva em diretório local no formato data.frame

loadData <- function(tabela) {
  read_csv("tabela", na = " ")
}
#Definindo o aplicativo:

Definir UI:
ui <- fluidPage(
  
  #Titulo
  titlePanel("Atualização de Tecnologias Demandadas - Conitec"),
  
  # Sidebar com botão para rodar a atualização:
  sidebarLayout(
    sidebarPanel(
      actionButton (inputId = "atualizar",
                    label = "Verificar atualização")
    ),
    
    # Mostra tabela com as atualizações
    mainPanel(
      textOutput("anterior"),
      dataTableOutput("antes"),
      textOutput("atualizado"),
      dataTableOutput("depois"),
      textOutput("igual")
    )
  )
)
Definir o server:
server <- function(input, output) {
  observeEvent(input$atualizar,{ #quando o botão de atualização for pressionado (input do usuário, )uma nova tabela atualizada é gerada ("tabela2")
    lista_tabelas <- html_table(read_html("http://conitec.gov.br/tecnologias-em-avaliacao"), header = TRUE, trim=TRUE, fill=TRUE)
    tabela2 <- lista_tabelas[[1]]
    
    tabela <- loadData() #e a tabela original que tenho salva no diretório local é aberta
    
    #Obs. é possível inserir um teste aqui para ver se o aplicativo funciona e para ver como ele mostra as atualizações
    #Ex. tabela <- tabela %>% slice(10:511)
    
    if (isTRUE(all.equal(tabela, tabela2))==TRUE) #caso as duas tabelas sejam iguais (sem atualizações), aparece uma mensagem de que não houve atualizações
    {output$igual <- renderText("Sem novas atualizações")} 
    
    else {  #caso as tabelas sejam diferentes (quando houver atualização), ele deve me mostrar como era antes e qual alteração está presente na nova tabela
      output$anterior <- renderText("TABELA ANTERIOR")
      output$antes <- renderDataTable(setdiff(tabela, tabela2))
      
      output$atualizado <- renderText("ATUALIZAÇÃO")
      output$depois <- renderDataTable(setdiff(tabela2, tabela))
      
      saveData() #por fim, ele deve salvar a nova tabela atualizada para uma nova comparação futura
    }
  })
}

Run the application
shinyApp(ui = ui, server = server)
